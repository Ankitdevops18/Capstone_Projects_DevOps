The `http.client` module in Python provides a suite of functions and classes for handling HTTP requests and responses. This module supports both HTTP and HTTPS protocols and allows you to interact with web servers to send requests and receive responses. Here's a detailed explanation of the module and its main methods:

### Overview of `http.client`

The `http.client` module provides classes and methods to work with HTTP connections. The primary classes you'll interact with are:

1. **HTTPConnection**: For making HTTP requests.
2. **HTTPSConnection**: For making HTTPS requests.
3. **HTTPResponse**: For handling the responses received from the server.

### Key Methods

#### 1. `HTTPConnection.request()`
The `request()` method is used to send a request to the server.

**Syntax**:
```python
HTTPConnection.request(method, url, body=None, headers={})
```

**Parameters**:
- `method`: The HTTP method to use (e.g., 'GET', 'POST', 'PUT', 'DELETE').
- `url`: The URL path to request.
- `body`: The body of the request (for methods like POST).
- `headers`: A dictionary of HTTP headers to send with the request.

#### Example:
```python
import http.client

conn = http.client.HTTPConnection("www.example.com")
conn.request("GET", "/")
```

#### 2. `HTTPConnection.getresponse()`
The `getresponse()` method retrieves the response from the server after a request has been sent.

**Syntax**:
```python
response = HTTPConnection.getresponse()
```

**Returns**:
- An `HTTPResponse` object that represents the response from the server.

#### Example:
```python
response = conn.getresponse()
```

#### 3. `HTTPResponse.read()`
The `read()` method reads the body of the response.

**Syntax**:
```python
data = HTTPResponse.read(size=-1)
```

**Parameters**:
- `size`: The number of bytes to read. If not specified or set to -1, the method reads until the end of the response.

**Returns**:
- The body of the response as bytes.

#### Example:
```python
data = response.read()
```

#### 4. `decode()`
The `decode()` method is a string method used to convert bytes to a string.

**Syntax**:
```python
string = bytes.decode(encoding="utf-8")
```

**Parameters**:
- `encoding`: The encoding to use (default is "utf-8").

**Returns**:
- The decoded string.

#### Example:
```python
content = data.decode("utf-8")
```

### Complete Example
Here's a complete example demonstrating how to use `http.client` to make a GET request, read the response, and decode it:

```python
import http.client

# Create an HTTP connection to the server
conn = http.client.HTTPConnection("www.example.com")

# Send a GET request to the root URL
conn.request("GET", "/")

# Get the response from the server
response = conn.getresponse()

# Read the response body
data = response.read()

# Decode the response body to a string
content = data.decode("utf-8")

# Print the response content
print(content)

# Close the connection
conn.close()
```

### Summary

- **`http.client.HTTPConnection`**: Used to make HTTP requests.
- **`request()`**: Sends a request to the server.
- **`getresponse()`**: Retrieves the server's response.
- **`HTTPResponse.read()`**: Reads the body of the response.
- **`decode()`**: Converts bytes to a string.

These methods and classes allow you to interact with web servers and handle HTTP communication in Python.